<?xml version="1.0" encoding="UTF-8"?><testrun name="test" project="EvilHangman" tests="22" started="22" failures="1" errors="0" ignored="0">
  <testsuite name="EvilHangmanTest" time="2.327">
    <testcase name="testWin" classname="EvilHangmanTest" time="0.831"/>
    <testcase name="testGuess" classname="EvilHangmanTest" time="0.231"/>
    <testcase name="testLoss" classname="EvilHangmanTest" time="0.239"/>
    <testcase name="testTwoGuesses" classname="EvilHangmanTest" time="0.212"/>
    <testcase name="testIllegalCharGuess" classname="EvilHangmanTest" time="0.202"/>
    <testcase name="testMultipleCharGuess" classname="EvilHangmanTest" time="0.205"/>
    <testcase name="testInitialValues" classname="EvilHangmanTest" time="0.203"/>
    <testcase name="testSecretWord" classname="EvilHangmanTest" time="0.204"/>
  </testsuite>
  <testsuite name="NormalHangmanTest" time="0.28">
    <testcase name="testCorrectAndIncorrectGuesses" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testUpdateStateRepeatedCorrectGuess" classname="NormalHangmanTest" time="0.277">
      <failure>java.lang.AssertionError&#13;
	at org.junit.Assert.fail(Assert.java:86)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertFalse(Assert.java:64)&#13;
	at org.junit.Assert.assertFalse(Assert.java:74)&#13;
	at NormalHangmanTest.testUpdateStateRepeatedCorrectGuess(NormalHangmanTest.java:200)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:601)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testUpdateStateCorrectGuess" classname="NormalHangmanTest" time="0.001"/>
    <testcase name="testWin" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testLoss" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testTwoIncorrectGuesses" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testIllegalCharGuess" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testUpdateStateInCorrectGuess" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testCorrectGuess1" classname="NormalHangmanTest" time="0.001"/>
    <testcase name="testCorrectGuess2" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testTwoCorrectGuesses" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testMultipleCharGuess" classname="NormalHangmanTest" time="0.001"/>
    <testcase name="testIncorrectGuess" classname="NormalHangmanTest" time="0.0"/>
    <testcase name="testInitialValues" classname="NormalHangmanTest" time="0.0"/>
  </testsuite>
</testrun>
